//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SalaryCalculationUI {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EmployeeMSDbDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EmployeeMSDbDataSet : global::System.Data.DataSet {
        
        private SalaryDataTable tableSalary;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EmployeeMSDbDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected EmployeeMSDbDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Salary"] != null)) {
                    base.Tables.Add(new SalaryDataTable(ds.Tables["Salary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalaryDataTable Salary {
            get {
                return this.tableSalary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            EmployeeMSDbDataSet cln = ((EmployeeMSDbDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Salary"] != null)) {
                    base.Tables.Add(new SalaryDataTable(ds.Tables["Salary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableSalary = ((SalaryDataTable)(base.Tables["Salary"]));
            if ((initTable == true)) {
                if ((this.tableSalary != null)) {
                    this.tableSalary.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "EmployeeMSDbDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EmployeeMSDbDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSalary = new SalaryDataTable();
            base.Tables.Add(this.tableSalary);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSalary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EmployeeMSDbDataSet ds = new EmployeeMSDbDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SalaryRowChangeEventHandler(object sender, SalaryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalaryDataTable : global::System.Data.TypedTableBase<SalaryRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnEmployeeId;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnDesignation;
            
            private global::System.Data.DataColumn columnAccountNo;
            
            private global::System.Data.DataColumn columnMonths;
            
            private global::System.Data.DataColumn columnGradeId;
            
            private global::System.Data.DataColumn columnBasic;
            
            private global::System.Data.DataColumn columnTransportAllowance;
            
            private global::System.Data.DataColumn columnMedicalAllowance;
            
            private global::System.Data.DataColumn columnHouseRent;
            
            private global::System.Data.DataColumn columnOtherAllowance;
            
            private global::System.Data.DataColumn columnGrossSalary;
            
            private global::System.Data.DataColumn columnTax;
            
            private global::System.Data.DataColumn columnNetGrossSalaryAfterTax;
            
            private global::System.Data.DataColumn columnTotalWorkingDay;
            
            private global::System.Data.DataColumn columnPerdaySalary;
            
            private global::System.Data.DataColumn columnDayPayable;
            
            private global::System.Data.DataColumn columnUnpaidLeave;
            
            private global::System.Data.DataColumn columnGivenAnnualLeave;
            
            private global::System.Data.DataColumn columnPHAttendence;
            
            private global::System.Data.DataColumn columnLeaveWithPay;
            
            private global::System.Data.DataColumn columnFine;
            
            private global::System.Data.DataColumn columnDeductionFromAnnualLeave;
            
            private global::System.Data.DataColumn columnAdvancePaid;
            
            private global::System.Data.DataColumn columnDeductionForLeave;
            
            private global::System.Data.DataColumn columnAdjustment;
            
            private global::System.Data.DataColumn columnTotalDeduction;
            
            private global::System.Data.DataColumn columnPreviousDues;
            
            private global::System.Data.DataColumn columnTotalAddition;
            
            private global::System.Data.DataColumn columnNetPayable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SalaryDataTable() {
                this.TableName = "Salary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SalaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SalaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EmployeeIdColumn {
                get {
                    return this.columnEmployeeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AccountNoColumn {
                get {
                    return this.columnAccountNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MonthsColumn {
                get {
                    return this.columnMonths;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GradeIdColumn {
                get {
                    return this.columnGradeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BasicColumn {
                get {
                    return this.columnBasic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TransportAllowanceColumn {
                get {
                    return this.columnTransportAllowance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MedicalAllowanceColumn {
                get {
                    return this.columnMedicalAllowance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HouseRentColumn {
                get {
                    return this.columnHouseRent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OtherAllowanceColumn {
                get {
                    return this.columnOtherAllowance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GrossSalaryColumn {
                get {
                    return this.columnGrossSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TaxColumn {
                get {
                    return this.columnTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NetGrossSalaryAfterTaxColumn {
                get {
                    return this.columnNetGrossSalaryAfterTax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TotalWorkingDayColumn {
                get {
                    return this.columnTotalWorkingDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PerdaySalaryColumn {
                get {
                    return this.columnPerdaySalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DayPayableColumn {
                get {
                    return this.columnDayPayable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UnpaidLeaveColumn {
                get {
                    return this.columnUnpaidLeave;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GivenAnnualLeaveColumn {
                get {
                    return this.columnGivenAnnualLeave;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PHAttendenceColumn {
                get {
                    return this.columnPHAttendence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LeaveWithPayColumn {
                get {
                    return this.columnLeaveWithPay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FineColumn {
                get {
                    return this.columnFine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DeductionFromAnnualLeaveColumn {
                get {
                    return this.columnDeductionFromAnnualLeave;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AdvancePaidColumn {
                get {
                    return this.columnAdvancePaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DeductionForLeaveColumn {
                get {
                    return this.columnDeductionForLeave;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AdjustmentColumn {
                get {
                    return this.columnAdjustment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TotalDeductionColumn {
                get {
                    return this.columnTotalDeduction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PreviousDuesColumn {
                get {
                    return this.columnPreviousDues;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TotalAdditionColumn {
                get {
                    return this.columnTotalAddition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NetPayableColumn {
                get {
                    return this.columnNetPayable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SalaryRow this[int index] {
                get {
                    return ((SalaryRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SalaryRowChangeEventHandler SalaryRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SalaryRowChangeEventHandler SalaryRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SalaryRowChangeEventHandler SalaryRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SalaryRowChangeEventHandler SalaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSalaryRow(SalaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SalaryRow AddSalaryRow(
                        decimal EmployeeId, 
                        string EmployeeName, 
                        string Designation, 
                        decimal AccountNo, 
                        string Months, 
                        decimal GradeId, 
                        decimal Basic, 
                        decimal TransportAllowance, 
                        decimal MedicalAllowance, 
                        decimal HouseRent, 
                        decimal OtherAllowance, 
                        decimal GrossSalary, 
                        decimal Tax, 
                        decimal NetGrossSalaryAfterTax, 
                        decimal TotalWorkingDay, 
                        decimal PerdaySalary, 
                        decimal DayPayable, 
                        decimal UnpaidLeave, 
                        decimal GivenAnnualLeave, 
                        decimal PHAttendence, 
                        decimal LeaveWithPay, 
                        decimal Fine, 
                        decimal DeductionFromAnnualLeave, 
                        decimal AdvancePaid, 
                        decimal DeductionForLeave, 
                        decimal Adjustment, 
                        decimal TotalDeduction, 
                        decimal PreviousDues, 
                        decimal TotalAddition, 
                        decimal NetPayable) {
                SalaryRow rowSalaryRow = ((SalaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        EmployeeId,
                        EmployeeName,
                        Designation,
                        AccountNo,
                        Months,
                        GradeId,
                        Basic,
                        TransportAllowance,
                        MedicalAllowance,
                        HouseRent,
                        OtherAllowance,
                        GrossSalary,
                        Tax,
                        NetGrossSalaryAfterTax,
                        TotalWorkingDay,
                        PerdaySalary,
                        DayPayable,
                        UnpaidLeave,
                        GivenAnnualLeave,
                        PHAttendence,
                        LeaveWithPay,
                        Fine,
                        DeductionFromAnnualLeave,
                        AdvancePaid,
                        DeductionForLeave,
                        Adjustment,
                        TotalDeduction,
                        PreviousDues,
                        TotalAddition,
                        NetPayable};
                rowSalaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSalaryRow);
                return rowSalaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SalaryRow FindById(int Id) {
                return ((SalaryRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SalaryDataTable cln = ((SalaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SalaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnEmployeeId = base.Columns["EmployeeId"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnAccountNo = base.Columns["AccountNo"];
                this.columnMonths = base.Columns["Months"];
                this.columnGradeId = base.Columns["GradeId"];
                this.columnBasic = base.Columns["Basic"];
                this.columnTransportAllowance = base.Columns["TransportAllowance"];
                this.columnMedicalAllowance = base.Columns["MedicalAllowance"];
                this.columnHouseRent = base.Columns["HouseRent"];
                this.columnOtherAllowance = base.Columns["OtherAllowance"];
                this.columnGrossSalary = base.Columns["GrossSalary"];
                this.columnTax = base.Columns["Tax"];
                this.columnNetGrossSalaryAfterTax = base.Columns["NetGrossSalaryAfterTax"];
                this.columnTotalWorkingDay = base.Columns["TotalWorkingDay"];
                this.columnPerdaySalary = base.Columns["PerdaySalary"];
                this.columnDayPayable = base.Columns["DayPayable"];
                this.columnUnpaidLeave = base.Columns["UnpaidLeave"];
                this.columnGivenAnnualLeave = base.Columns["GivenAnnualLeave"];
                this.columnPHAttendence = base.Columns["PHAttendence"];
                this.columnLeaveWithPay = base.Columns["LeaveWithPay"];
                this.columnFine = base.Columns["Fine"];
                this.columnDeductionFromAnnualLeave = base.Columns["DeductionFromAnnualLeave"];
                this.columnAdvancePaid = base.Columns["AdvancePaid"];
                this.columnDeductionForLeave = base.Columns["DeductionForLeave"];
                this.columnAdjustment = base.Columns["Adjustment"];
                this.columnTotalDeduction = base.Columns["TotalDeduction"];
                this.columnPreviousDues = base.Columns["PreviousDues"];
                this.columnTotalAddition = base.Columns["TotalAddition"];
                this.columnNetPayable = base.Columns["NetPayable"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnEmployeeId = new global::System.Data.DataColumn("EmployeeId", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeId);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnDesignation = new global::System.Data.DataColumn("Designation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnAccountNo = new global::System.Data.DataColumn("AccountNo", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountNo);
                this.columnMonths = new global::System.Data.DataColumn("Months", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMonths);
                this.columnGradeId = new global::System.Data.DataColumn("GradeId", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGradeId);
                this.columnBasic = new global::System.Data.DataColumn("Basic", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasic);
                this.columnTransportAllowance = new global::System.Data.DataColumn("TransportAllowance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransportAllowance);
                this.columnMedicalAllowance = new global::System.Data.DataColumn("MedicalAllowance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMedicalAllowance);
                this.columnHouseRent = new global::System.Data.DataColumn("HouseRent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHouseRent);
                this.columnOtherAllowance = new global::System.Data.DataColumn("OtherAllowance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOtherAllowance);
                this.columnGrossSalary = new global::System.Data.DataColumn("GrossSalary", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossSalary);
                this.columnTax = new global::System.Data.DataColumn("Tax", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTax);
                this.columnNetGrossSalaryAfterTax = new global::System.Data.DataColumn("NetGrossSalaryAfterTax", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetGrossSalaryAfterTax);
                this.columnTotalWorkingDay = new global::System.Data.DataColumn("TotalWorkingDay", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalWorkingDay);
                this.columnPerdaySalary = new global::System.Data.DataColumn("PerdaySalary", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerdaySalary);
                this.columnDayPayable = new global::System.Data.DataColumn("DayPayable", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDayPayable);
                this.columnUnpaidLeave = new global::System.Data.DataColumn("UnpaidLeave", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnpaidLeave);
                this.columnGivenAnnualLeave = new global::System.Data.DataColumn("GivenAnnualLeave", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGivenAnnualLeave);
                this.columnPHAttendence = new global::System.Data.DataColumn("PHAttendence", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHAttendence);
                this.columnLeaveWithPay = new global::System.Data.DataColumn("LeaveWithPay", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeaveWithPay);
                this.columnFine = new global::System.Data.DataColumn("Fine", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFine);
                this.columnDeductionFromAnnualLeave = new global::System.Data.DataColumn("DeductionFromAnnualLeave", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeductionFromAnnualLeave);
                this.columnAdvancePaid = new global::System.Data.DataColumn("AdvancePaid", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdvancePaid);
                this.columnDeductionForLeave = new global::System.Data.DataColumn("DeductionForLeave", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeductionForLeave);
                this.columnAdjustment = new global::System.Data.DataColumn("Adjustment", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdjustment);
                this.columnTotalDeduction = new global::System.Data.DataColumn("TotalDeduction", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDeduction);
                this.columnPreviousDues = new global::System.Data.DataColumn("PreviousDues", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreviousDues);
                this.columnTotalAddition = new global::System.Data.DataColumn("TotalAddition", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAddition);
                this.columnNetPayable = new global::System.Data.DataColumn("NetPayable", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetPayable);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnEmployeeId.AllowDBNull = false;
                this.columnEmployeeName.AllowDBNull = false;
                this.columnEmployeeName.MaxLength = 150;
                this.columnDesignation.AllowDBNull = false;
                this.columnDesignation.MaxLength = 150;
                this.columnAccountNo.AllowDBNull = false;
                this.columnMonths.AllowDBNull = false;
                this.columnMonths.MaxLength = 150;
                this.columnGradeId.AllowDBNull = false;
                this.columnBasic.AllowDBNull = false;
                this.columnTransportAllowance.AllowDBNull = false;
                this.columnMedicalAllowance.AllowDBNull = false;
                this.columnHouseRent.AllowDBNull = false;
                this.columnOtherAllowance.AllowDBNull = false;
                this.columnGrossSalary.AllowDBNull = false;
                this.columnTax.AllowDBNull = false;
                this.columnNetGrossSalaryAfterTax.AllowDBNull = false;
                this.columnTotalWorkingDay.AllowDBNull = false;
                this.columnPerdaySalary.AllowDBNull = false;
                this.columnDayPayable.AllowDBNull = false;
                this.columnUnpaidLeave.AllowDBNull = false;
                this.columnGivenAnnualLeave.AllowDBNull = false;
                this.columnPHAttendence.AllowDBNull = false;
                this.columnLeaveWithPay.AllowDBNull = false;
                this.columnFine.AllowDBNull = false;
                this.columnDeductionFromAnnualLeave.AllowDBNull = false;
                this.columnAdvancePaid.AllowDBNull = false;
                this.columnDeductionForLeave.AllowDBNull = false;
                this.columnAdjustment.AllowDBNull = false;
                this.columnTotalDeduction.AllowDBNull = false;
                this.columnPreviousDues.AllowDBNull = false;
                this.columnTotalAddition.AllowDBNull = false;
                this.columnNetPayable.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SalaryRow NewSalaryRow() {
                return ((SalaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SalaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SalaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalaryRowChanged != null)) {
                    this.SalaryRowChanged(this, new SalaryRowChangeEvent(((SalaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalaryRowChanging != null)) {
                    this.SalaryRowChanging(this, new SalaryRowChangeEvent(((SalaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalaryRowDeleted != null)) {
                    this.SalaryRowDeleted(this, new SalaryRowChangeEvent(((SalaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalaryRowDeleting != null)) {
                    this.SalaryRowDeleting(this, new SalaryRowChangeEvent(((SalaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSalaryRow(SalaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EmployeeMSDbDataSet ds = new EmployeeMSDbDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SalaryRow : global::System.Data.DataRow {
            
            private SalaryDataTable tableSalary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SalaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalary = ((SalaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Id {
                get {
                    return ((int)(this[this.tableSalary.IdColumn]));
                }
                set {
                    this[this.tableSalary.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal EmployeeId {
                get {
                    return ((decimal)(this[this.tableSalary.EmployeeIdColumn]));
                }
                set {
                    this[this.tableSalary.EmployeeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EmployeeName {
                get {
                    return ((string)(this[this.tableSalary.EmployeeNameColumn]));
                }
                set {
                    this[this.tableSalary.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Designation {
                get {
                    return ((string)(this[this.tableSalary.DesignationColumn]));
                }
                set {
                    this[this.tableSalary.DesignationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal AccountNo {
                get {
                    return ((decimal)(this[this.tableSalary.AccountNoColumn]));
                }
                set {
                    this[this.tableSalary.AccountNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Months {
                get {
                    return ((string)(this[this.tableSalary.MonthsColumn]));
                }
                set {
                    this[this.tableSalary.MonthsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal GradeId {
                get {
                    return ((decimal)(this[this.tableSalary.GradeIdColumn]));
                }
                set {
                    this[this.tableSalary.GradeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Basic {
                get {
                    return ((decimal)(this[this.tableSalary.BasicColumn]));
                }
                set {
                    this[this.tableSalary.BasicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TransportAllowance {
                get {
                    return ((decimal)(this[this.tableSalary.TransportAllowanceColumn]));
                }
                set {
                    this[this.tableSalary.TransportAllowanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal MedicalAllowance {
                get {
                    return ((decimal)(this[this.tableSalary.MedicalAllowanceColumn]));
                }
                set {
                    this[this.tableSalary.MedicalAllowanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal HouseRent {
                get {
                    return ((decimal)(this[this.tableSalary.HouseRentColumn]));
                }
                set {
                    this[this.tableSalary.HouseRentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal OtherAllowance {
                get {
                    return ((decimal)(this[this.tableSalary.OtherAllowanceColumn]));
                }
                set {
                    this[this.tableSalary.OtherAllowanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal GrossSalary {
                get {
                    return ((decimal)(this[this.tableSalary.GrossSalaryColumn]));
                }
                set {
                    this[this.tableSalary.GrossSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Tax {
                get {
                    return ((decimal)(this[this.tableSalary.TaxColumn]));
                }
                set {
                    this[this.tableSalary.TaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal NetGrossSalaryAfterTax {
                get {
                    return ((decimal)(this[this.tableSalary.NetGrossSalaryAfterTaxColumn]));
                }
                set {
                    this[this.tableSalary.NetGrossSalaryAfterTaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TotalWorkingDay {
                get {
                    return ((decimal)(this[this.tableSalary.TotalWorkingDayColumn]));
                }
                set {
                    this[this.tableSalary.TotalWorkingDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PerdaySalary {
                get {
                    return ((decimal)(this[this.tableSalary.PerdaySalaryColumn]));
                }
                set {
                    this[this.tableSalary.PerdaySalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DayPayable {
                get {
                    return ((decimal)(this[this.tableSalary.DayPayableColumn]));
                }
                set {
                    this[this.tableSalary.DayPayableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal UnpaidLeave {
                get {
                    return ((decimal)(this[this.tableSalary.UnpaidLeaveColumn]));
                }
                set {
                    this[this.tableSalary.UnpaidLeaveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal GivenAnnualLeave {
                get {
                    return ((decimal)(this[this.tableSalary.GivenAnnualLeaveColumn]));
                }
                set {
                    this[this.tableSalary.GivenAnnualLeaveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PHAttendence {
                get {
                    return ((decimal)(this[this.tableSalary.PHAttendenceColumn]));
                }
                set {
                    this[this.tableSalary.PHAttendenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal LeaveWithPay {
                get {
                    return ((decimal)(this[this.tableSalary.LeaveWithPayColumn]));
                }
                set {
                    this[this.tableSalary.LeaveWithPayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Fine {
                get {
                    return ((decimal)(this[this.tableSalary.FineColumn]));
                }
                set {
                    this[this.tableSalary.FineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DeductionFromAnnualLeave {
                get {
                    return ((decimal)(this[this.tableSalary.DeductionFromAnnualLeaveColumn]));
                }
                set {
                    this[this.tableSalary.DeductionFromAnnualLeaveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal AdvancePaid {
                get {
                    return ((decimal)(this[this.tableSalary.AdvancePaidColumn]));
                }
                set {
                    this[this.tableSalary.AdvancePaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal DeductionForLeave {
                get {
                    return ((decimal)(this[this.tableSalary.DeductionForLeaveColumn]));
                }
                set {
                    this[this.tableSalary.DeductionForLeaveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Adjustment {
                get {
                    return ((decimal)(this[this.tableSalary.AdjustmentColumn]));
                }
                set {
                    this[this.tableSalary.AdjustmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TotalDeduction {
                get {
                    return ((decimal)(this[this.tableSalary.TotalDeductionColumn]));
                }
                set {
                    this[this.tableSalary.TotalDeductionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal PreviousDues {
                get {
                    return ((decimal)(this[this.tableSalary.PreviousDuesColumn]));
                }
                set {
                    this[this.tableSalary.PreviousDuesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TotalAddition {
                get {
                    return ((decimal)(this[this.tableSalary.TotalAdditionColumn]));
                }
                set {
                    this[this.tableSalary.TotalAdditionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal NetPayable {
                get {
                    return ((decimal)(this[this.tableSalary.NetPayableColumn]));
                }
                set {
                    this[this.tableSalary.NetPayableColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SalaryRowChangeEvent : global::System.EventArgs {
            
            private SalaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SalaryRowChangeEvent(SalaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SalaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SalaryCalculationUI.EmployeeMSDbDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SalaryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SalaryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Salary";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("EmployeeId", "EmployeeId");
            tableMapping.ColumnMappings.Add("EmployeeName", "EmployeeName");
            tableMapping.ColumnMappings.Add("Designation", "Designation");
            tableMapping.ColumnMappings.Add("AccountNo", "AccountNo");
            tableMapping.ColumnMappings.Add("Months", "Months");
            tableMapping.ColumnMappings.Add("GradeId", "GradeId");
            tableMapping.ColumnMappings.Add("Basic", "Basic");
            tableMapping.ColumnMappings.Add("TransportAllowance", "TransportAllowance");
            tableMapping.ColumnMappings.Add("MedicalAllowance", "MedicalAllowance");
            tableMapping.ColumnMappings.Add("HouseRent", "HouseRent");
            tableMapping.ColumnMappings.Add("OtherAllowance", "OtherAllowance");
            tableMapping.ColumnMappings.Add("GrossSalary", "GrossSalary");
            tableMapping.ColumnMappings.Add("Tax", "Tax");
            tableMapping.ColumnMappings.Add("NetGrossSalaryAfterTax", "NetGrossSalaryAfterTax");
            tableMapping.ColumnMappings.Add("TotalWorkingDay", "TotalWorkingDay");
            tableMapping.ColumnMappings.Add("PerdaySalary", "PerdaySalary");
            tableMapping.ColumnMappings.Add("DayPayable", "DayPayable");
            tableMapping.ColumnMappings.Add("UnpaidLeave", "UnpaidLeave");
            tableMapping.ColumnMappings.Add("GivenAnnualLeave", "GivenAnnualLeave");
            tableMapping.ColumnMappings.Add("PHAttendence", "PHAttendence");
            tableMapping.ColumnMappings.Add("LeaveWithPay", "LeaveWithPay");
            tableMapping.ColumnMappings.Add("Fine", "Fine");
            tableMapping.ColumnMappings.Add("DeductionFromAnnualLeave", "DeductionFromAnnualLeave");
            tableMapping.ColumnMappings.Add("AdvancePaid", "AdvancePaid");
            tableMapping.ColumnMappings.Add("DeductionForLeave", "DeductionForLeave");
            tableMapping.ColumnMappings.Add("Adjustment", "Adjustment");
            tableMapping.ColumnMappings.Add("TotalDeduction", "TotalDeduction");
            tableMapping.ColumnMappings.Add("PreviousDues", "PreviousDues");
            tableMapping.ColumnMappings.Add("TotalAddition", "TotalAddition");
            tableMapping.ColumnMappings.Add("NetPayable", "NetPayable");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Salary] WHERE (([Id] = @Original_Id) AND ([EmployeeId] = @Original_EmployeeId) AND ([EmployeeName] = @Original_EmployeeName) AND ([Designation] = @Original_Designation) AND ([AccountNo] = @Original_AccountNo) AND ([Months] = @Original_Months) AND ([GradeId] = @Original_GradeId) AND ([Basic] = @Original_Basic) AND ([TransportAllowance] = @Original_TransportAllowance) AND ([MedicalAllowance] = @Original_MedicalAllowance) AND ([HouseRent] = @Original_HouseRent) AND ([OtherAllowance] = @Original_OtherAllowance) AND ([GrossSalary] = @Original_GrossSalary) AND ([Tax] = @Original_Tax) AND ([NetGrossSalaryAfterTax] = @Original_NetGrossSalaryAfterTax) AND ([TotalWorkingDay] = @Original_TotalWorkingDay) AND ([PerdaySalary] = @Original_PerdaySalary) AND ([DayPayable] = @Original_DayPayable) AND ([UnpaidLeave] = @Original_UnpaidLeave) AND ([GivenAnnualLeave] = @Original_GivenAnnualLeave) AND ([PHAttendence] = @Original_PHAttendence) AND ([LeaveWithPay] = @Original_LeaveWithPay) AND ([Fine] = @Original_Fine) AND ([DeductionFromAnnualLeave] = @Original_DeductionFromAnnualLeave) AND ([AdvancePaid] = @Original_AdvancePaid) AND ([DeductionForLeave] = @Original_DeductionForLeave) AND ([Adjustment] = @Original_Adjustment) AND ([TotalDeduction] = @Original_TotalDeduction) AND ([PreviousDues] = @Original_PreviousDues) AND ([TotalAddition] = @Original_TotalAddition) AND ([NetPayable] = @Original_NetPayable))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EmployeeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Designation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Designation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccountNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccountNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Months", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Months", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GradeId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GradeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Basic", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Basic", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransportAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TransportAllowance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MedicalAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "MedicalAllowance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HouseRent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "HouseRent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OtherAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "OtherAllowance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrossSalary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GrossSalary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tax", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Tax", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NetGrossSalaryAfterTax", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "NetGrossSalaryAfterTax", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalWorkingDay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalWorkingDay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PerdaySalary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PerdaySalary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DayPayable", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DayPayable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnpaidLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "UnpaidLeave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GivenAnnualLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GivenAnnualLeave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHAttendence", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PHAttendence", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LeaveWithPay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LeaveWithPay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Fine", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Fine", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DeductionFromAnnualLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DeductionFromAnnualLeave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdvancePaid", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AdvancePaid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DeductionForLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DeductionForLeave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Adjustment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Adjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalDeduction", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalDeduction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PreviousDues", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PreviousDues", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalAddition", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalAddition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NetPayable", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "NetPayable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Salary] ([EmployeeId], [EmployeeName], [Designation], [AccountNo], [Months], [GradeId], [Basic], [TransportAllowance], [MedicalAllowance], [HouseRent], [OtherAllowance], [GrossSalary], [Tax], [NetGrossSalaryAfterTax], [TotalWorkingDay], [PerdaySalary], [DayPayable], [UnpaidLeave], [GivenAnnualLeave], [PHAttendence], [LeaveWithPay], [Fine], [DeductionFromAnnualLeave], [AdvancePaid], [DeductionForLeave], [Adjustment], [TotalDeduction], [PreviousDues], [TotalAddition], [NetPayable]) VALUES (@EmployeeId, @EmployeeName, @Designation, @AccountNo, @Months, @GradeId, @Basic, @TransportAllowance, @MedicalAllowance, @HouseRent, @OtherAllowance, @GrossSalary, @Tax, @NetGrossSalaryAfterTax, @TotalWorkingDay, @PerdaySalary, @DayPayable, @UnpaidLeave, @GivenAnnualLeave, @PHAttendence, @LeaveWithPay, @Fine, @DeductionFromAnnualLeave, @AdvancePaid, @DeductionForLeave, @Adjustment, @TotalDeduction, @PreviousDues, @TotalAddition, @NetPayable);
SELECT Id, EmployeeId, EmployeeName, Designation, AccountNo, Months, GradeId, Basic, TransportAllowance, MedicalAllowance, HouseRent, OtherAllowance, GrossSalary, Tax, NetGrossSalaryAfterTax, TotalWorkingDay, PerdaySalary, DayPayable, UnpaidLeave, GivenAnnualLeave, PHAttendence, LeaveWithPay, Fine, DeductionFromAnnualLeave, AdvancePaid, DeductionForLeave, Adjustment, TotalDeduction, PreviousDues, TotalAddition, NetPayable FROM Salary WHERE (Id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EmployeeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Designation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Designation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccountNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccountNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Months", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Months", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GradeId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GradeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Basic", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Basic", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransportAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TransportAllowance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MedicalAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "MedicalAllowance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HouseRent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "HouseRent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "OtherAllowance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrossSalary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GrossSalary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tax", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Tax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NetGrossSalaryAfterTax", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "NetGrossSalaryAfterTax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalWorkingDay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalWorkingDay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PerdaySalary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PerdaySalary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DayPayable", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DayPayable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnpaidLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "UnpaidLeave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GivenAnnualLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GivenAnnualLeave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHAttendence", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PHAttendence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeaveWithPay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LeaveWithPay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Fine", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Fine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeductionFromAnnualLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DeductionFromAnnualLeave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdvancePaid", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AdvancePaid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeductionForLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DeductionForLeave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Adjustment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Adjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalDeduction", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalDeduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PreviousDues", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PreviousDues", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalAddition", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalAddition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NetPayable", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "NetPayable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Salary] SET [EmployeeId] = @EmployeeId, [EmployeeName] = @EmployeeN" +
                "ame, [Designation] = @Designation, [AccountNo] = @AccountNo, [Months] = @Months," +
                " [GradeId] = @GradeId, [Basic] = @Basic, [TransportAllowance] = @TransportAllowa" +
                "nce, [MedicalAllowance] = @MedicalAllowance, [HouseRent] = @HouseRent, [OtherAll" +
                "owance] = @OtherAllowance, [GrossSalary] = @GrossSalary, [Tax] = @Tax, [NetGross" +
                "SalaryAfterTax] = @NetGrossSalaryAfterTax, [TotalWorkingDay] = @TotalWorkingDay," +
                " [PerdaySalary] = @PerdaySalary, [DayPayable] = @DayPayable, [UnpaidLeave] = @Un" +
                "paidLeave, [GivenAnnualLeave] = @GivenAnnualLeave, [PHAttendence] = @PHAttendenc" +
                "e, [LeaveWithPay] = @LeaveWithPay, [Fine] = @Fine, [DeductionFromAnnualLeave] = " +
                "@DeductionFromAnnualLeave, [AdvancePaid] = @AdvancePaid, [DeductionForLeave] = @" +
                "DeductionForLeave, [Adjustment] = @Adjustment, [TotalDeduction] = @TotalDeductio" +
                "n, [PreviousDues] = @PreviousDues, [TotalAddition] = @TotalAddition, [NetPayable" +
                "] = @NetPayable WHERE (([Id] = @Original_Id) AND ([EmployeeId] = @Original_Emplo" +
                "yeeId) AND ([EmployeeName] = @Original_EmployeeName) AND ([Designation] = @Origi" +
                "nal_Designation) AND ([AccountNo] = @Original_AccountNo) AND ([Months] = @Origin" +
                "al_Months) AND ([GradeId] = @Original_GradeId) AND ([Basic] = @Original_Basic) A" +
                "ND ([TransportAllowance] = @Original_TransportAllowance) AND ([MedicalAllowance]" +
                " = @Original_MedicalAllowance) AND ([HouseRent] = @Original_HouseRent) AND ([Oth" +
                "erAllowance] = @Original_OtherAllowance) AND ([GrossSalary] = @Original_GrossSal" +
                "ary) AND ([Tax] = @Original_Tax) AND ([NetGrossSalaryAfterTax] = @Original_NetGr" +
                "ossSalaryAfterTax) AND ([TotalWorkingDay] = @Original_TotalWorkingDay) AND ([Per" +
                "daySalary] = @Original_PerdaySalary) AND ([DayPayable] = @Original_DayPayable) A" +
                "ND ([UnpaidLeave] = @Original_UnpaidLeave) AND ([GivenAnnualLeave] = @Original_G" +
                "ivenAnnualLeave) AND ([PHAttendence] = @Original_PHAttendence) AND ([LeaveWithPa" +
                "y] = @Original_LeaveWithPay) AND ([Fine] = @Original_Fine) AND ([DeductionFromAn" +
                "nualLeave] = @Original_DeductionFromAnnualLeave) AND ([AdvancePaid] = @Original_" +
                "AdvancePaid) AND ([DeductionForLeave] = @Original_DeductionForLeave) AND ([Adjus" +
                "tment] = @Original_Adjustment) AND ([TotalDeduction] = @Original_TotalDeduction)" +
                " AND ([PreviousDues] = @Original_PreviousDues) AND ([TotalAddition] = @Original_" +
                "TotalAddition) AND ([NetPayable] = @Original_NetPayable));\r\nSELECT Id, EmployeeI" +
                "d, EmployeeName, Designation, AccountNo, Months, GradeId, Basic, TransportAllowa" +
                "nce, MedicalAllowance, HouseRent, OtherAllowance, GrossSalary, Tax, NetGrossSala" +
                "ryAfterTax, TotalWorkingDay, PerdaySalary, DayPayable, UnpaidLeave, GivenAnnualL" +
                "eave, PHAttendence, LeaveWithPay, Fine, DeductionFromAnnualLeave, AdvancePaid, D" +
                "eductionForLeave, Adjustment, TotalDeduction, PreviousDues, TotalAddition, NetPa" +
                "yable FROM Salary WHERE (Id = @Id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EmployeeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EmployeeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Designation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Designation", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AccountNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccountNo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Months", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Months", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GradeId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GradeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Basic", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Basic", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TransportAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TransportAllowance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MedicalAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "MedicalAllowance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HouseRent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "HouseRent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OtherAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "OtherAllowance", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GrossSalary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GrossSalary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tax", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Tax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NetGrossSalaryAfterTax", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "NetGrossSalaryAfterTax", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalWorkingDay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalWorkingDay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PerdaySalary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PerdaySalary", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DayPayable", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DayPayable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UnpaidLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "UnpaidLeave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GivenAnnualLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GivenAnnualLeave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHAttendence", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PHAttendence", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LeaveWithPay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LeaveWithPay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Fine", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Fine", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeductionFromAnnualLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DeductionFromAnnualLeave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdvancePaid", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AdvancePaid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeductionForLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DeductionForLeave", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Adjustment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Adjustment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalDeduction", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalDeduction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PreviousDues", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PreviousDues", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalAddition", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalAddition", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NetPayable", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "NetPayable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "EmployeeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EmployeeName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EmployeeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Designation", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Designation", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AccountNo", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AccountNo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Months", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Months", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GradeId", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GradeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Basic", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Basic", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TransportAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TransportAllowance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MedicalAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "MedicalAllowance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HouseRent", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "HouseRent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OtherAllowance", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "OtherAllowance", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GrossSalary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GrossSalary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tax", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Tax", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NetGrossSalaryAfterTax", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "NetGrossSalaryAfterTax", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalWorkingDay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalWorkingDay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PerdaySalary", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PerdaySalary", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DayPayable", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DayPayable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UnpaidLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "UnpaidLeave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GivenAnnualLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "GivenAnnualLeave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHAttendence", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PHAttendence", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LeaveWithPay", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "LeaveWithPay", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Fine", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Fine", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DeductionFromAnnualLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DeductionFromAnnualLeave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdvancePaid", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AdvancePaid", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DeductionForLeave", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "DeductionForLeave", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Adjustment", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "Adjustment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalDeduction", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalDeduction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PreviousDues", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "PreviousDues", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalAddition", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "TotalAddition", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NetPayable", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "NetPayable", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SalaryCalculationUI.Properties.Settings.Default.EmployeeMSDbConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Id, EmployeeId, EmployeeName, Designation, AccountNo, Months, GradeId, Basic, TransportAllowance, MedicalAllowance, HouseRent, OtherAllowance, GrossSalary, Tax, NetGrossSalaryAfterTax, TotalWorkingDay, PerdaySalary, DayPayable, UnpaidLeave, GivenAnnualLeave, PHAttendence, LeaveWithPay, Fine, DeductionFromAnnualLeave, AdvancePaid, DeductionForLeave, Adjustment, TotalDeduction, PreviousDues, TotalAddition, NetPayable FROM dbo.Salary";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT Id, EmployeeId, EmployeeName, Designation, AccountNo, Months, GradeId, Basic, TransportAllowance, MedicalAllowance, HouseRent, OtherAllowance, GrossSalary, Tax, NetGrossSalaryAfterTax, TotalWorkingDay, PerdaySalary, DayPayable, UnpaidLeave, GivenAnnualLeave, PHAttendence, LeaveWithPay, Fine, DeductionFromAnnualLeave, AdvancePaid, DeductionForLeave, Adjustment, TotalDeduction, PreviousDues, TotalAddition, NetPayable FROM dbo.Salary";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EmployeeMSDbDataSet.SalaryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EmployeeMSDbDataSet.SalaryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EmployeeMSDbDataSet.SalaryDataTable dataTable = new EmployeeMSDbDataSet.SalaryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(EmployeeMSDbDataSet.SalaryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EmployeeMSDbDataSet.SalaryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EmployeeMSDbDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Salary");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_Id, 
                    decimal Original_EmployeeId, 
                    string Original_EmployeeName, 
                    string Original_Designation, 
                    decimal Original_AccountNo, 
                    string Original_Months, 
                    decimal Original_GradeId, 
                    decimal Original_Basic, 
                    decimal Original_TransportAllowance, 
                    decimal Original_MedicalAllowance, 
                    decimal Original_HouseRent, 
                    decimal Original_OtherAllowance, 
                    decimal Original_GrossSalary, 
                    decimal Original_Tax, 
                    decimal Original_NetGrossSalaryAfterTax, 
                    decimal Original_TotalWorkingDay, 
                    decimal Original_PerdaySalary, 
                    decimal Original_DayPayable, 
                    decimal Original_UnpaidLeave, 
                    decimal Original_GivenAnnualLeave, 
                    decimal Original_PHAttendence, 
                    decimal Original_LeaveWithPay, 
                    decimal Original_Fine, 
                    decimal Original_DeductionFromAnnualLeave, 
                    decimal Original_AdvancePaid, 
                    decimal Original_DeductionForLeave, 
                    decimal Original_Adjustment, 
                    decimal Original_TotalDeduction, 
                    decimal Original_PreviousDues, 
                    decimal Original_TotalAddition, 
                    decimal Original_NetPayable) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_EmployeeId));
            if ((Original_EmployeeName == null)) {
                throw new global::System.ArgumentNullException("Original_EmployeeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_EmployeeName));
            }
            if ((Original_Designation == null)) {
                throw new global::System.ArgumentNullException("Original_Designation");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_Designation));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_AccountNo));
            if ((Original_Months == null)) {
                throw new global::System.ArgumentNullException("Original_Months");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Months));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_GradeId));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_Basic));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_TransportAllowance));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_MedicalAllowance));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((decimal)(Original_HouseRent));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((decimal)(Original_OtherAllowance));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_GrossSalary));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((decimal)(Original_Tax));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((decimal)(Original_NetGrossSalaryAfterTax));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((decimal)(Original_TotalWorkingDay));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((decimal)(Original_PerdaySalary));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((decimal)(Original_DayPayable));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((decimal)(Original_UnpaidLeave));
            this.Adapter.DeleteCommand.Parameters[19].Value = ((decimal)(Original_GivenAnnualLeave));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((decimal)(Original_PHAttendence));
            this.Adapter.DeleteCommand.Parameters[21].Value = ((decimal)(Original_LeaveWithPay));
            this.Adapter.DeleteCommand.Parameters[22].Value = ((decimal)(Original_Fine));
            this.Adapter.DeleteCommand.Parameters[23].Value = ((decimal)(Original_DeductionFromAnnualLeave));
            this.Adapter.DeleteCommand.Parameters[24].Value = ((decimal)(Original_AdvancePaid));
            this.Adapter.DeleteCommand.Parameters[25].Value = ((decimal)(Original_DeductionForLeave));
            this.Adapter.DeleteCommand.Parameters[26].Value = ((decimal)(Original_Adjustment));
            this.Adapter.DeleteCommand.Parameters[27].Value = ((decimal)(Original_TotalDeduction));
            this.Adapter.DeleteCommand.Parameters[28].Value = ((decimal)(Original_PreviousDues));
            this.Adapter.DeleteCommand.Parameters[29].Value = ((decimal)(Original_TotalAddition));
            this.Adapter.DeleteCommand.Parameters[30].Value = ((decimal)(Original_NetPayable));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    decimal EmployeeId, 
                    string EmployeeName, 
                    string Designation, 
                    decimal AccountNo, 
                    string Months, 
                    decimal GradeId, 
                    decimal Basic, 
                    decimal TransportAllowance, 
                    decimal MedicalAllowance, 
                    decimal HouseRent, 
                    decimal OtherAllowance, 
                    decimal GrossSalary, 
                    decimal Tax, 
                    decimal NetGrossSalaryAfterTax, 
                    decimal TotalWorkingDay, 
                    decimal PerdaySalary, 
                    decimal DayPayable, 
                    decimal UnpaidLeave, 
                    decimal GivenAnnualLeave, 
                    decimal PHAttendence, 
                    decimal LeaveWithPay, 
                    decimal Fine, 
                    decimal DeductionFromAnnualLeave, 
                    decimal AdvancePaid, 
                    decimal DeductionForLeave, 
                    decimal Adjustment, 
                    decimal TotalDeduction, 
                    decimal PreviousDues, 
                    decimal TotalAddition, 
                    decimal NetPayable) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(EmployeeId));
            if ((EmployeeName == null)) {
                throw new global::System.ArgumentNullException("EmployeeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(EmployeeName));
            }
            if ((Designation == null)) {
                throw new global::System.ArgumentNullException("Designation");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Designation));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(AccountNo));
            if ((Months == null)) {
                throw new global::System.ArgumentNullException("Months");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Months));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(GradeId));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(Basic));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(TransportAllowance));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(MedicalAllowance));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(HouseRent));
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(OtherAllowance));
            this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(GrossSalary));
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(Tax));
            this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(NetGrossSalaryAfterTax));
            this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(TotalWorkingDay));
            this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(PerdaySalary));
            this.Adapter.InsertCommand.Parameters[16].Value = ((decimal)(DayPayable));
            this.Adapter.InsertCommand.Parameters[17].Value = ((decimal)(UnpaidLeave));
            this.Adapter.InsertCommand.Parameters[18].Value = ((decimal)(GivenAnnualLeave));
            this.Adapter.InsertCommand.Parameters[19].Value = ((decimal)(PHAttendence));
            this.Adapter.InsertCommand.Parameters[20].Value = ((decimal)(LeaveWithPay));
            this.Adapter.InsertCommand.Parameters[21].Value = ((decimal)(Fine));
            this.Adapter.InsertCommand.Parameters[22].Value = ((decimal)(DeductionFromAnnualLeave));
            this.Adapter.InsertCommand.Parameters[23].Value = ((decimal)(AdvancePaid));
            this.Adapter.InsertCommand.Parameters[24].Value = ((decimal)(DeductionForLeave));
            this.Adapter.InsertCommand.Parameters[25].Value = ((decimal)(Adjustment));
            this.Adapter.InsertCommand.Parameters[26].Value = ((decimal)(TotalDeduction));
            this.Adapter.InsertCommand.Parameters[27].Value = ((decimal)(PreviousDues));
            this.Adapter.InsertCommand.Parameters[28].Value = ((decimal)(TotalAddition));
            this.Adapter.InsertCommand.Parameters[29].Value = ((decimal)(NetPayable));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal EmployeeId, 
                    string EmployeeName, 
                    string Designation, 
                    decimal AccountNo, 
                    string Months, 
                    decimal GradeId, 
                    decimal Basic, 
                    decimal TransportAllowance, 
                    decimal MedicalAllowance, 
                    decimal HouseRent, 
                    decimal OtherAllowance, 
                    decimal GrossSalary, 
                    decimal Tax, 
                    decimal NetGrossSalaryAfterTax, 
                    decimal TotalWorkingDay, 
                    decimal PerdaySalary, 
                    decimal DayPayable, 
                    decimal UnpaidLeave, 
                    decimal GivenAnnualLeave, 
                    decimal PHAttendence, 
                    decimal LeaveWithPay, 
                    decimal Fine, 
                    decimal DeductionFromAnnualLeave, 
                    decimal AdvancePaid, 
                    decimal DeductionForLeave, 
                    decimal Adjustment, 
                    decimal TotalDeduction, 
                    decimal PreviousDues, 
                    decimal TotalAddition, 
                    decimal NetPayable, 
                    int Original_Id, 
                    decimal Original_EmployeeId, 
                    string Original_EmployeeName, 
                    string Original_Designation, 
                    decimal Original_AccountNo, 
                    string Original_Months, 
                    decimal Original_GradeId, 
                    decimal Original_Basic, 
                    decimal Original_TransportAllowance, 
                    decimal Original_MedicalAllowance, 
                    decimal Original_HouseRent, 
                    decimal Original_OtherAllowance, 
                    decimal Original_GrossSalary, 
                    decimal Original_Tax, 
                    decimal Original_NetGrossSalaryAfterTax, 
                    decimal Original_TotalWorkingDay, 
                    decimal Original_PerdaySalary, 
                    decimal Original_DayPayable, 
                    decimal Original_UnpaidLeave, 
                    decimal Original_GivenAnnualLeave, 
                    decimal Original_PHAttendence, 
                    decimal Original_LeaveWithPay, 
                    decimal Original_Fine, 
                    decimal Original_DeductionFromAnnualLeave, 
                    decimal Original_AdvancePaid, 
                    decimal Original_DeductionForLeave, 
                    decimal Original_Adjustment, 
                    decimal Original_TotalDeduction, 
                    decimal Original_PreviousDues, 
                    decimal Original_TotalAddition, 
                    decimal Original_NetPayable, 
                    int Id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(EmployeeId));
            if ((EmployeeName == null)) {
                throw new global::System.ArgumentNullException("EmployeeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(EmployeeName));
            }
            if ((Designation == null)) {
                throw new global::System.ArgumentNullException("Designation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Designation));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(AccountNo));
            if ((Months == null)) {
                throw new global::System.ArgumentNullException("Months");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Months));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(GradeId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Basic));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(TransportAllowance));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(MedicalAllowance));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(HouseRent));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(OtherAllowance));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(GrossSalary));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Tax));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(NetGrossSalaryAfterTax));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(TotalWorkingDay));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(PerdaySalary));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(DayPayable));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((decimal)(UnpaidLeave));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(GivenAnnualLeave));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(PHAttendence));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(LeaveWithPay));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Fine));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(DeductionFromAnnualLeave));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(AdvancePaid));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(DeductionForLeave));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(Adjustment));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((decimal)(TotalDeduction));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((decimal)(PreviousDues));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((decimal)(TotalAddition));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(NetPayable));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(Original_Id));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(Original_EmployeeId));
            if ((Original_EmployeeName == null)) {
                throw new global::System.ArgumentNullException("Original_EmployeeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((string)(Original_EmployeeName));
            }
            if ((Original_Designation == null)) {
                throw new global::System.ArgumentNullException("Original_Designation");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_Designation));
            }
            this.Adapter.UpdateCommand.Parameters[34].Value = ((decimal)(Original_AccountNo));
            if ((Original_Months == null)) {
                throw new global::System.ArgumentNullException("Original_Months");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_Months));
            }
            this.Adapter.UpdateCommand.Parameters[36].Value = ((decimal)(Original_GradeId));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((decimal)(Original_Basic));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((decimal)(Original_TransportAllowance));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((decimal)(Original_MedicalAllowance));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((decimal)(Original_HouseRent));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((decimal)(Original_OtherAllowance));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((decimal)(Original_GrossSalary));
            this.Adapter.UpdateCommand.Parameters[43].Value = ((decimal)(Original_Tax));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((decimal)(Original_NetGrossSalaryAfterTax));
            this.Adapter.UpdateCommand.Parameters[45].Value = ((decimal)(Original_TotalWorkingDay));
            this.Adapter.UpdateCommand.Parameters[46].Value = ((decimal)(Original_PerdaySalary));
            this.Adapter.UpdateCommand.Parameters[47].Value = ((decimal)(Original_DayPayable));
            this.Adapter.UpdateCommand.Parameters[48].Value = ((decimal)(Original_UnpaidLeave));
            this.Adapter.UpdateCommand.Parameters[49].Value = ((decimal)(Original_GivenAnnualLeave));
            this.Adapter.UpdateCommand.Parameters[50].Value = ((decimal)(Original_PHAttendence));
            this.Adapter.UpdateCommand.Parameters[51].Value = ((decimal)(Original_LeaveWithPay));
            this.Adapter.UpdateCommand.Parameters[52].Value = ((decimal)(Original_Fine));
            this.Adapter.UpdateCommand.Parameters[53].Value = ((decimal)(Original_DeductionFromAnnualLeave));
            this.Adapter.UpdateCommand.Parameters[54].Value = ((decimal)(Original_AdvancePaid));
            this.Adapter.UpdateCommand.Parameters[55].Value = ((decimal)(Original_DeductionForLeave));
            this.Adapter.UpdateCommand.Parameters[56].Value = ((decimal)(Original_Adjustment));
            this.Adapter.UpdateCommand.Parameters[57].Value = ((decimal)(Original_TotalDeduction));
            this.Adapter.UpdateCommand.Parameters[58].Value = ((decimal)(Original_PreviousDues));
            this.Adapter.UpdateCommand.Parameters[59].Value = ((decimal)(Original_TotalAddition));
            this.Adapter.UpdateCommand.Parameters[60].Value = ((decimal)(Original_NetPayable));
            this.Adapter.UpdateCommand.Parameters[61].Value = ((int)(Id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal EmployeeId, 
                    string EmployeeName, 
                    string Designation, 
                    decimal AccountNo, 
                    string Months, 
                    decimal GradeId, 
                    decimal Basic, 
                    decimal TransportAllowance, 
                    decimal MedicalAllowance, 
                    decimal HouseRent, 
                    decimal OtherAllowance, 
                    decimal GrossSalary, 
                    decimal Tax, 
                    decimal NetGrossSalaryAfterTax, 
                    decimal TotalWorkingDay, 
                    decimal PerdaySalary, 
                    decimal DayPayable, 
                    decimal UnpaidLeave, 
                    decimal GivenAnnualLeave, 
                    decimal PHAttendence, 
                    decimal LeaveWithPay, 
                    decimal Fine, 
                    decimal DeductionFromAnnualLeave, 
                    decimal AdvancePaid, 
                    decimal DeductionForLeave, 
                    decimal Adjustment, 
                    decimal TotalDeduction, 
                    decimal PreviousDues, 
                    decimal TotalAddition, 
                    decimal NetPayable, 
                    int Original_Id, 
                    decimal Original_EmployeeId, 
                    string Original_EmployeeName, 
                    string Original_Designation, 
                    decimal Original_AccountNo, 
                    string Original_Months, 
                    decimal Original_GradeId, 
                    decimal Original_Basic, 
                    decimal Original_TransportAllowance, 
                    decimal Original_MedicalAllowance, 
                    decimal Original_HouseRent, 
                    decimal Original_OtherAllowance, 
                    decimal Original_GrossSalary, 
                    decimal Original_Tax, 
                    decimal Original_NetGrossSalaryAfterTax, 
                    decimal Original_TotalWorkingDay, 
                    decimal Original_PerdaySalary, 
                    decimal Original_DayPayable, 
                    decimal Original_UnpaidLeave, 
                    decimal Original_GivenAnnualLeave, 
                    decimal Original_PHAttendence, 
                    decimal Original_LeaveWithPay, 
                    decimal Original_Fine, 
                    decimal Original_DeductionFromAnnualLeave, 
                    decimal Original_AdvancePaid, 
                    decimal Original_DeductionForLeave, 
                    decimal Original_Adjustment, 
                    decimal Original_TotalDeduction, 
                    decimal Original_PreviousDues, 
                    decimal Original_TotalAddition, 
                    decimal Original_NetPayable) {
            return this.Update(EmployeeId, EmployeeName, Designation, AccountNo, Months, GradeId, Basic, TransportAllowance, MedicalAllowance, HouseRent, OtherAllowance, GrossSalary, Tax, NetGrossSalaryAfterTax, TotalWorkingDay, PerdaySalary, DayPayable, UnpaidLeave, GivenAnnualLeave, PHAttendence, LeaveWithPay, Fine, DeductionFromAnnualLeave, AdvancePaid, DeductionForLeave, Adjustment, TotalDeduction, PreviousDues, TotalAddition, NetPayable, Original_Id, Original_EmployeeId, Original_EmployeeName, Original_Designation, Original_AccountNo, Original_Months, Original_GradeId, Original_Basic, Original_TransportAllowance, Original_MedicalAllowance, Original_HouseRent, Original_OtherAllowance, Original_GrossSalary, Original_Tax, Original_NetGrossSalaryAfterTax, Original_TotalWorkingDay, Original_PerdaySalary, Original_DayPayable, Original_UnpaidLeave, Original_GivenAnnualLeave, Original_PHAttendence, Original_LeaveWithPay, Original_Fine, Original_DeductionFromAnnualLeave, Original_AdvancePaid, Original_DeductionForLeave, Original_Adjustment, Original_TotalDeduction, Original_PreviousDues, Original_TotalAddition, Original_NetPayable, Original_Id);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private SalaryTableAdapter _salaryTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public SalaryTableAdapter SalaryTableAdapter {
            get {
                return this._salaryTableAdapter;
            }
            set {
                this._salaryTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._salaryTableAdapter != null) 
                            && (this._salaryTableAdapter.Connection != null))) {
                    return this._salaryTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._salaryTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(EmployeeMSDbDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._salaryTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Salary.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._salaryTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(EmployeeMSDbDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._salaryTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Salary.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._salaryTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(EmployeeMSDbDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._salaryTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Salary.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._salaryTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(EmployeeMSDbDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._salaryTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._salaryTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._salaryTableAdapter != null)) {
                    revertConnections.Add(this._salaryTableAdapter, this._salaryTableAdapter.Connection);
                    this._salaryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._salaryTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._salaryTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._salaryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._salaryTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._salaryTableAdapter != null)) {
                    this._salaryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._salaryTableAdapter]));
                    this._salaryTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591